name: MLOps Pipeline

on:
  workflow_dispatch:
    inputs:
      stage:
        description: 'Which stage to run? (data, train, build, all)'
        required: true
        default: 'all'

jobs:
  data-processing:
    if: ${{ github.event.inputs.stage == 'data' || github.event.inputs.stage == 'all' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run data processing
        run: |
          python src/data/run_processing.py \
            --input data/raw/house_data.csv \
            --output data/processed/cleaned_house_data.csv

      - name: Run feature engineering
        run: |
          python src/features/engineer.py \
            --input data/processed/cleaned_house_data.csv \
            --output data/processed/featured_house_data.csv \
            --preprocessor models/trained/preprocessor.pkl

      - name: Upload processed data and preprocessor
        uses: actions/upload-artifact@v4
        with:
          name: processed-and-featured-data
          path: |
            data/processed/cleaned_house_data.csv
            data/processed/featured_house_data.csv
            models/trained/preprocessor.pkl

  model-training:
    if: ${{ github.event.inputs.stage == 'train' || github.event.inputs.stage == 'all' }}
    needs: data-processing
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install mlflow

      - name: Download processed data and preprocessor
        uses: actions/download-artifact@v4
        with:
          name: processed-and-featured-data

      - name: Start MLflow Tracking Server (Docker)
        run: |
          # 创建 mlruns 目录并设置权限
          mkdir -p ${{ github.workspace }}/mlruns
          chmod 777 ${{ github.workspace }}/mlruns
          
          # 启动 MLflow 服务器，使用当前用户权限
          docker run -d --name mlflow-server \
            -p 5000:5000 \
            -v ${{ github.workspace }}/mlruns:/mlflow/mlruns \
            -u $(id -u):$(id -g) \
            --rm \
            ghcr.io/mlflow/mlflow:v2.3.1 \
            mlflow server \
              --backend-store-uri sqlite:///tmp/mlflow.db \
              --default-artifact-root /mlflow/mlruns \
              --host 0.0.0.0 \
              --port 5000
          
          # 等待MLflow服务启动
          for i in {1..10}; do
            if curl -s http://127.0.0.1:5000; then
              echo "MLflow server is up!"
              break
            else
              echo "Waiting for MLflow server..."
              sleep 3
            fi
          done

      - name: Train model with MLflow tracking
        env:
          MLFLOW_TRACKING_URI: http://127.0.0.1:5000
        run: |
          python src/models/train_model.py \
            --config configs/model_config.yaml \
            --data data/processed/featured_house_data.csv \
            --models-dir models \
            --mlflow-tracking-uri "http://127.0.0.1:5000"

      - name: Upload trained model
        uses: actions/upload-artifact@v4
        with:
          name: trained-model
          path: |
            models/

      - name: Upload MLflow runs
        uses: actions/upload-artifact@v4
        with:
          name: mlruns
          path: mlruns/

      - name: Stop MLflow Tracking Server
        if: always()
        run: |
          docker stop mlflow-server || true

  build-and-publish:
    if: ${{ github.event.inputs.stage == 'build' || github.event.inputs.stage == 'all' }}
    needs: model-training
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download trained model
        uses: actions/download-artifact@v4
        with:
          name: trained-model

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/houseprice-predictor
          tags: |
            type=ref,event=branch
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Image digest
        run: echo "Image digest ${{ steps.meta.outputs.digest }}"
